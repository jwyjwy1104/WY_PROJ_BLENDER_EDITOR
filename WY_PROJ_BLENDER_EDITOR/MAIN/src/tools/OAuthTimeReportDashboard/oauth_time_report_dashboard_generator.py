import sys
import os
import re # Get string in between 2 strings
import time
import pickle
from operator import itemgetter
from datetime import datetime, timedelta

filename = "oauth_time_report_dashboard_util.py"
exec(compile(open(filename).read(), filename, 'exec'))

filename = "oauth_time_report_dashboard_get_spreadsheet_data.py"
exec(compile(open(filename).read(), filename, 'exec'))

def generate_time_report_dashboard_html_file_str(javacscript_amchart_push_code_str):
    '''
    ------------------------------------------------------------------------
    Title:
    ------------------------------------------------------------------------
    Sub function to process the final time report dashboard HTML code string
    
    Called by function: oauth_time_report_dashboard_generator::oauth_time_report_dashboard_generator()
    ------------------------------------------------------------------------
    Description:
    ------------------------------------------------------------------------
    This is one of the sub functions which generates and returns the final time 
    report HTML code string to be exported. Where the amChart generate data
    Javascript function body code where all the Google Spreadsheet data is 
    pushed into the amChart are already generated by another sub function and 
    is passed into this function as paramter, so i can just simply append the 
    Javascript code to the proper place.
    
    ------------------------------------------------------------------------
    Parameters:
    ------------------------------------------------------------------------
    :param javacscript_amchart_push_code_str: 
        Javascript generateChartData() function body code string where all the
        Google Spreadsheet data values are pushed into the amChart.
    :type  python_amchart_data: String

    ------------------------------------------------------------------------
    Return:
    ------------------------------------------------------------------------
    :return time_report_dashboard_html_str: 
        Final time report HTML page code string combined with the amChart data
        pushing code passed in as parameter.
    :rtype  time_report_dashboard_html_str: String
    '''
    #===========================================================================
    # Main time report dashboard amChart HTML page code
    #===========================================================================
    time_report_dashboard_html_str = ""
    time_report_dashboard_html_str += "<!--Resources --> \n\
    <script src=\"https://www.amcharts.com/lib/3/amcharts.js\"></script> \n\
    <script src=\"https://www.amcharts.com/lib/3/serial.js\"></script> \n\
    <script src=\"https://www.amcharts.com/lib/3/plugins/export/export.min.js\"></script> \n\
    <link rel=\"stylesheet\" href=\"https://www.amcharts.com/lib/3/plugins/export/export.css\" type=\"text/css\" media=\"all\" />  \n\
    <script src=\"https://www.amcharts.com/lib/3/themes/light.js\"></script> \n\
    <script src=\"moment.js\"></script> \n\
    <!-- Chart code --> \n\
    <script> \n\
        var chartData = generateChartData(); \n\
        var chart = AmCharts.makeChart( \n\
            \"chartdiv\", { \n\
            \"type\": \"serial\", \"theme\": \"light\", \n\
            \"legend\": { \"useGraphSettings\": true },  \n\
            \"dataProvider\": chartData, \n\
            \"valueAxes\": [{ \n\
                \"id\": \"v1\",  \n\
                \"axisColor\": \"#33AAFF\", \"axisThickness\": 10, \n\
                \"gridAlpha\": 0, \"axisAlpha\": 1, \n\
                \"position\": \"left\", \"tickLength\":0, \n\
                \"autoOffset\": true, \"offset\": 120, \n\
                \"autoGridCount\": false, \"gridCount\": 15, \n\
                \"unit\": \"hrs\", \"maximum\": 15, \"minimum\": 0 \n\
                }, { \n\
                \"id\": \"v2\", \n\
                \"axisColor\": \"#FCD202\", \"axisThickness\": 10, \n\
                \"gridAlpha\": 0, \"axisAlpha\": 1, \n\
                \"position\": \"left\", \"tickLength\":0, \n\
                \"autoOffset\": true, \"offset\": 60, \n\
                \"autoGridCount\": false, \"gridCount\": 15, \n\
                \"unit\": \"hrs\", \"maximum\": 15, \"minimum\": 0 \n\
                }, { \n\
                \"id\": \"v3\", \n\
                \"axisColor\": \"#B0DE09\", \"axisThickness\": 10, \n\
                \"gridAlpha\": 0, \"axisAlpha\": 1, \n\
                \"tickLength\":0, \"position\": \"left\", \n\
                \"autoOffset\": true, \"offset\": 0, \n\
                \"autoGridCount\": false, \"gridCount\": 20, \n\
                \"unit\": \"%\", \"maximum\": 200, \"minimum\": 0 \n\
                }], \n\
            \"mouseWheelScrollEnabled\": true, \n\
            \"graphs\": [{ \n\
                \"valueAxis\": \"v1\", \n\
                \"lineColor\": \"#33AAFF\", \n\
                \"alphaField\": \"alpha\", \n\
                \"balloonText\": \"<span style='font-size:12px;'>[[title]] on \\n[[category]]:<br><span style='font-size:20px;'>[[value]]</span> [[additional]]</span>\", \n\
                \"fillAlphas\": 1, \n\
                \"title\": \"Final Work Time\", \n\
                \"type\": \"column\", \n\
                \"valueField\": \"wyday_final_work_time\", \n\
                \"dashLengthField\": \"dashLengthColumn\" \n\
                }, { \n\
                \"valueAxis\": \"v2\", \n\
                \"balloonText\": \"<span style='font-size:12px;'>[[title]] on \\n[[category]]:<br><span style='font-size:20px;'>[[value]]</span> [[additional]]</span>\", \n\
                \"lineColor\": \"#FCD202\", \n\
                \"bullet\": \"square\", \n\
                \"bulletBorderThickness\": 1, \n\
                \"hideBulletsCount\": 30, \n\
                \"title\": \"Total Work Time\", \n\
                \"valueField\": \"wyday_total_work_time\", \n\
                \"fillAlphas\": 0 \n\
                }, { \n\
                \"valueAxis\": \"v3\", \n\
                \"balloonText\": \"<span style='font-size:12px;'>[[title]] on \\n[[category]]:<br><span style='font-size:20px;'>[[value]]</span> [[additional]]</span>\", \n\
                \"lineColor\": \"#B0DE09\", \n\
                \"bullet\": \"triangleUp\", \n\
                \"bulletBorderThickness\": 1, \n\
                \"hideBulletsCount\": 30, \n\
                \"title\": \"Work Efficiency\", \n\
                \"valueField\": \"wyday_work_efficiency\", \n\
                \"fillAlphas\": 0 \n\
                }], \n\
            \"chartScrollbar\": {}, \n\
            \"chartCursor\": { \n\
                \"cursorPosition\": \"mouse\" \n\
                }, \n\
            \"categoryField\": \"date\", \n\
            \"categoryAxis\": { \n\
                \"labelRotation\": 45,             \n\
                //\"parseDates\": true, \n\
                \"axisColor\": \"#DADADA\", \n\
                \"minorGridEnabled\": true \n\
                }, \n\
            \"export\": { \n\
                \"enabled\": true, \n\
                \"position\": \"bottom-right\" \n\
                } \n\
            }); \n\
        chart.addListener(\"dataUpdated\", zoomChart); \n\
        zoomChart(); \n\
        function convertUTCDateToLocalDate(date) { \n\
            var newDate = new Date(date.getTime() + date.getTimezoneOffset() * 60 * 1000); \n\
            var offset = date.getTimezoneOffset() / 60; \n\
            var hours = date.getHours(); \n\
            newDate.setHours(hours - offset); \n\
            return newDate; \n\
        } \n\
        function generateChartData() { \n\
            var chartData = [];\n"
    # Append the amChart data generating code string in the HTML Javascript 
    # function code
    time_report_dashboard_html_str += javacscript_amchart_push_code_str

    time_report_dashboard_html_str += "\
            chartData.sort(compare); \n\
            chartData.splice(-1, 1); \n\
            for (var i = 0; i < chartData.length; i++) { \n\
                chartData[i].date = moment(chartData[i].date, \"DD-MMM-YYYY\").format(\"DD-MMM-YYYY[\\n]dddd\") \n\
            } \n\
            return chartData; \n\
        } \n\
        function compare(a, b) { \n\
            if (!moment(a.date).isAfter(b.date)) \n\
                return -1; \n\
            if (moment(a.date).isAfter(b.date)) \n\
                return 1; \n\
            return 0; \n\
        } \n\
        function zoomChart() { \n\
            chart.zoomToIndexes(chart.dataProvider.length - 20, chart.dataProvider.length - 1); \n\
        } \n\
    </script> \n\
    <!-- HTML --> \n\
    <div id=\"chartdiv\"></div> \n\
    "

    # Return the final time report HTML page code string
    return time_report_dashboard_html_str

def generate_time_report_dashboard_amchart_data_generate_str(python_amchart_data):
    '''
    ------------------------------------------------------------------------
    Title:
    ------------------------------------------------------------------------
    Sub function to process the Google Spreadsheet data into Python list format
    
    Called by function: oauth_time_report_dashboard_generator::oauth_time_report_dashboard_generator()
    ------------------------------------------------------------------------
    Description:
    ------------------------------------------------------------------------
    This is one of the sub functions to help processing the data to generate 
    the time report dashboard HTML page which generates the amChart Javasccript 
    code string from the Python amChart data passed in as parameter return the 
    list of dictionary objects which contains all the time report spreadsheet 
    data values organized.
    
    This function generates the funtion body of the Javascript function 
    generateChartData() for the main HTML dashboard page, which is called very 
    at the top of HTML code to generate the data to be pushed into the amChart,
    then if i use this function i can just simply append the Javascript code to
    the main HTML code to push the data values i retrieved from Google 
    Spreadsheet.
    ------------------------------------------------------------------------
    Parameters:
    ------------------------------------------------------------------------
    :param python_amchart_data: 
        Python format amChart data list data structure generated using the data
        retrieved from time report Google Spreadsheet.
    :type  python_amchart_data: [{},{},{},{} ... ] 

    ------------------------------------------------------------------------
    Return:
    ------------------------------------------------------------------------
    :return javacscript_amchart_push_code_str: 
        Javascript code generate amChart data code string generated with Python 
        amChart data to be appended to the main HTML code.
    :rtype  javacscript_amchart_push_code_str: String
    '''

    # Using the amChart data to generate the amChart generate code in Javascript
    # as strings, to be appened to the final HTML page
    javacscript_amchart_push_code_str = ""
    print("len(python_amchart_data):", str(python_amchart_data))

    for i in range(0, len(python_amchart_data)):
        current_date_str = python_amchart_data[i]["date"].strftime('%Y/%m/%d')
        current_date_str_as_prefix = python_amchart_data[i]["date"].strftime('%Y-%m-%d')

        #=======================================================================
        # Conver the Python amChart data into strings to generate the 
        # Javascript code string
        #=======================================================================
        # Final work time 
        # (Total work time * work efficiency --> Convert to hours)
        current_final_work_time_str = python_amchart_data[i]["wyday_final_work_time"].strftime('%H:%M:%S')
        current_final_work_time_total_hours = python_amchart_data[i]["wyday_final_work_time"].hour
        current_final_work_time_total_hours += python_amchart_data[i]["wyday_final_work_time"].minute / 60
        current_final_work_time_total_hours += python_amchart_data[i]["wyday_final_work_time"].second / 3600

        # Total work time --> Convert to hours (eg. 01:30:00 --> 1.5 hours)
        current_total_work_time_str = python_amchart_data[i]["wyday_total_work_time"].strftime('%H:%M:%S')
        current_total_work_time_total_hours = python_amchart_data[i]["wyday_total_work_time"].hour
        current_total_work_time_total_hours += python_amchart_data[i]["wyday_total_work_time"].minute / 60
        current_total_work_time_total_hours += python_amchart_data[i]["wyday_total_work_time"].second / 3600

        # Work efficiency percentage 
        # (Without '%' and rounded to 2 decimal digits)
        current_work_efficiency_str = str(round(python_amchart_data[i]["wyday_work_efficiency"], 2))

        #=======================================================================
        # Javascript code where above processed data are pushed into the amChart
        #=======================================================================
        javacscript_amchart_push_code_str += "            var newDate = convertUTCDateToLocalDate(new Date(\"" + current_date_str + "\"));" + "\n"
        javacscript_amchart_push_code_str += "            newDate.setMonth(newDate.getUTCMonth());" + "\n"
        javacscript_amchart_push_code_str += "            newDate.setDate(newDate.getUTCDate());" + "\n"
        javacscript_amchart_push_code_str += "            newDate.setFullYear(newDate.getUTCFullYear());" + "\n"
        javacscript_amchart_push_code_str += "            newDate.setHours(newDate.getUTCHours());" + "\n"
        javacscript_amchart_push_code_str += "            newDate.setMinutes(newDate.getUTCMinutes());" + "\n"
        javacscript_amchart_push_code_str += "            newDate.setSeconds(newDate.getUTCSeconds());" + "\n"
        javacscript_amchart_push_code_str += "            chartDataElem = { " + "\n"
        javacscript_amchart_push_code_str += "                \"date\": AmCharts.formatDate(newDate, \"DD-MMM-YYYY\")," + "\n"
        javacscript_amchart_push_code_str += "                \"wyday_final_work_time\": \"" + str(current_final_work_time_total_hours) + "\"," + "\n"
        javacscript_amchart_push_code_str += "                \"wyday_total_work_time\": \"" + str(current_total_work_time_total_hours) + "\"," + "\n"
        javacscript_amchart_push_code_str += "                \"wyday_work_efficiency\": \"" + current_work_efficiency_str +"\"" + "\n"
        javacscript_amchart_push_code_str += "            }"  + "\n" 
        javacscript_amchart_push_code_str += "            chartData.push(chartDataElem);" + "\n"

    # Return Javascript amChart data generate code string
    return javacscript_amchart_push_code_str

def process_google_spreadsheet_time_report_data_into_amchart_data(spreadsheetData, time_report_dashboard_html_file_path):
    '''
    ------------------------------------------------------------------------
    Title:
    ------------------------------------------------------------------------
    Sub function to process the Google Spreadsheet data into Python amChart 
    data format which is the list of dictionary objects.
    
    Called by function: oauth_time_report_dashboard_generator::oauth_time_report_dashboard_generator()
    ------------------------------------------------------------------------
    Description:
    ------------------------------------------------------------------------
    This function is to generate the Python amChart data list data structure to 
    hold all the information retrieved from time report Google Spreadsheet to 
    organize the data in a trivial way.

    ------------------------------------------------------------------------
    Parameters:
    ------------------------------------------------------------------------
    :param spreadsheetData:
    :type spreadsheetData:

    IMPORTANT:
        This is the main algorithm where i calculate the time report data for 
        daily format, means that automatically sums up the values from 
        multiple rows of time reports in the Google Spreadsheet or even multiple 
        Google Spreadsheet time reports.

    ------------------------------------------------------------------------
    Algorithm:
    ------------------------------------------------------------------------
    1. Load byte code lists from file, if exists:
        - Process Google Spreadsheet data 
    2. Find the element in the existing list with key:
        - If found then add the data (work time, duration, efficiency) to the existing element 
        - If not found then add the new element to the existing list.
    3. If the byte code file does not exist then proceed to make one
        - Process Google Spreadsheet data 
        - Set list data contains the time report informations  (work time, duration, efficiency)
        - Append to empty list
    4. Save byte code lists to file
    5. Go back to step 1 for merging second spreadsheet data into one dashboard.

    ------------------------------------------------------------------------
    Return:
    ------------------------------------------------------------------------
    :return python_amchart_data_arr: Python amChart data main data structure list
    :rtype  python_amchart_data_arr: [{},{},{} ...]

    '''

    # Main Python amChart data byte code file name
    python_amchart_data_arr_file_path = time_report_dashboard_html_file_path.replace(".html", "") + "_python_amchart_data_list.txt"
    # Main Python amChart data byte code file destination path to save and load
    # the merged data list with
    python_amchart_data_arr_file_path = current_working_directory + python_amchart_data_arr_file_path

    # Previous and current date values to separate the work time by days
    prev_wy_day_date = None
    current_wy_date = None

    if os.path.isfile(python_amchart_data_arr_file_path):
        # Load back the list from file with appened data
        python_amchart_data_arr = load_list_from_file(python_amchart_data_arr_file_path)
        python_amchart_data_arr_counter = len(python_amchart_data_arr)
    else:
        # Main data structure to hold all the amChart data
        python_amchart_data_arr = []
        python_amchart_data_arr_counter = 0
    
    #print("\n\n" + str(spreadsheetData))
    
    # Current amChart data to initialize with Google Spreadsheet data
    previous_wy_day = None
    current_wy_day = None
    current_wy_day_counter = 1

    # Column element categories' index 
    work_date_column_index = 0
    work_start_time_column_index = 0
    work_end_time_column_index = 0
    work_duration_column_index = 0
    work_efficiency_column_index = 0
    work_efficiency_duration_column_index = 0
    work_session_column_index = 0
    work_memo_column_index = 0

    time_report_title_cell_row_index = 0
    #===========================================================================
    # Loop for title cell rows to detect which column values are belong to which 
    # column
    #===========================================================================
    for i in range(0, len(spreadsheetData)):
        for j in range(0, len(spreadsheetData[i])):
            if str(spreadsheetData[i][j]).strip() == "Date":
                work_date_column_index = j  
            if str(spreadsheetData[i][j]).strip() == "Start time":
                work_start_time_column_index = j
            if str(spreadsheetData[i][j]).strip() == "End time":
                work_end_time_column_index = j
            if str(spreadsheetData[i][j]).strip() == "Duration":
                work_duration_column_index = j
            if str(spreadsheetData[i][j]).strip() == "Eff":
                work_efficiency_column_index = j
            if str(spreadsheetData[i][j]).strip() == "Eff Duration":
                work_efficiency_duration_column_index = j
            if str(spreadsheetData[i][j]).strip() == "Work session":
                work_session_column_index = j
            if str(spreadsheetData[i][j]).strip() == "Memo":
                work_memo_column_index = j
                time_report_title_cell_row_index = i
                break
      
    #===========================================================================
    # Main loop:
    # Iterate through spreadsheet data retrieved from Google
    # Process the time report row data by applying the main algorithm:
    '''
    1. Load byte code lists from file, if exists:
        - Process Google Spreadsheet data 
    2. Find the element in the existing list with key:
        - If found then add the data (work time, duration, efficiency) to the existing element 
        - If not found then add the new element to the existing list.
    3. If the byte code file does not exist then proceed to make one
        - Process Google Spreadsheet data 
        - Set list data contains the time report informations  (work time, duration, efficiency)
        - Append to empty list
    4. Save byte code lists to file
    5. Go back to step 1 for merging second spreadsheet data into one dashboard.
    '''
    #===========================================================================
    # Iterator to increment the for loop index inside for loop manually
    iterator = range(0, len(spreadsheetData)).__iter__()
    for i in iterator:
        # If current spreadsheet row have element values 
        # and first column value is in date format "0000/00/00" 
        if len(spreadsheetData[i]) > 0 \
           and validate_date_string_format(spreadsheetData[i][work_date_column_index]):
            # If current dictionary object is not initialized and no loaded 
            # existing list, means that this is the first data of the 
            # spreadsheet provided in the makefile so initialize it with values.
            if current_wy_day == None and len(python_amchart_data_arr) <= 0:
                # Initialzie with data values from rest of the row columns
                #   date                    : Date of current time report spreadsheet row
                #   wyday_final_work_time   : Work efficiency duration of current time report spreadsheet row.  (In amChart - "Final Work Time" which is the multiple of "Total Work Time" and "Work Efficiency")
                #   wyday_total_work_time   : Work duration of current time report spreadsheet row.             (In amChart - "Total Work Time")
                #   wyday_work_efficiency   : Work efficiency of current time report spreadsheet row.           (In amChart - "Work Efficiency")
                #   counter                 : Counter to calculate the average work efficiency.
                #   average_calculated      : Flag to check if the average work efficiency is calculated or not.
                current_wy_day = {"date": datetime.strptime(spreadsheetData[i][work_date_column_index], "%Y/%m/%d"), \
                                "wyday_final_work_time": datetime.strptime(spreadsheetData[i][work_efficiency_duration_column_index], "%H:%M:%S"), \
                                "wyday_total_work_time": datetime.strptime(spreadsheetData[i][work_duration_column_index], "%H:%M:%S"), \
                                "wyday_work_efficiency": float(str(spreadsheetData[i][work_efficiency_column_index]).replace("%", "")), \
                                "counter": 1, \
                                "average_calculated": False}
                # Append current work day dirctionary object to the main data 
                # structure "python_amchart_data_arr"
                python_amchart_data_arr.append(current_wy_day)
                python_amchart_data_arr_counter += 1 # Increment counter
            elif len(python_amchart_data_arr) > 0:
                # If there is existing amChart data lists then try to find the 
                # matching dates so I don't have duplicated amChart data
                # Find the list with key having current date in the main data 
                # structure "python_amchart_data_arr" by calling sub function
                # Parameters: Lists, finding element, key
                elem_found = find_element_in_list_with_key_in_lists(python_amchart_data_arr, datetime.strptime(spreadsheetData[i][work_date_column_index], "%Y/%m/%d"), "date")

                # If the element with the same date exists inside the data 
                # structure then add the new spreadsheet row data values to 
                # existing dictionary object found in the main data structure
                if elem_found != None:
                    # Initialize the main data structure counter
                    python_amchart_data_arr_counter = len(python_amchart_data_arr)

                    # Found elem
                    current_wy_day = elem_found

                    # Set current dictionary object "date" value 
                    #current_wy_day["date"] = datetime.strptime(spreadsheetData[i][work_date_column_index], "%Y/%m/%d")

                    # Add final work time to the existing dictionary 
                    # object
                    adding_work_time_str = str(spreadsheetData[i][work_efficiency_duration_column_index])
                    current_wy_day["wyday_final_work_time"] = current_wy_day["wyday_final_work_time"] + timedelta( \
                        hours=datetime.strptime(adding_work_time_str, "%H:%M:%S").hour, \
                        minutes=datetime.strptime(adding_work_time_str, "%H:%M:%S").minute, \
                        seconds=datetime.strptime(adding_work_time_str, "%H:%M:%S").second)
                
                    # Add total work time to the existing dictionary object
                    adding_work_time_str = str(spreadsheetData[i][work_duration_column_index])
                    current_wy_day["wyday_total_work_time"] = current_wy_day["wyday_total_work_time"] + timedelta( \
                        hours=datetime.strptime(adding_work_time_str, "%H:%M:%S").hour, \
                        minutes=datetime.strptime(adding_work_time_str, "%H:%M:%S").minute, \
                        seconds=datetime.strptime(adding_work_time_str, "%H:%M:%S").second)

                    # Add work efficiency percentage to the existing dictionary 
                    # object without percent sign
                    current_wy_day["wyday_work_efficiency"] = current_wy_day["wyday_work_efficiency"] + \
                            float(str(spreadsheetData[i][work_efficiency_column_index]).replace("%", ""))

                    # Increment counter to the existing dictionary object since 
                    # another new values are added
                    current_wy_day["counter"] += 1

                    # Set to deafult value False since average is not 
                    # calculated yet, so even though the average is already 
                    # calculated, but new datas are added then the flag will 
                    # turn False so the average should be calculated once again
                    # with data updated
                    current_wy_day["average_calculated"] = False
                    print("current_wy_day[\"wyday_final_work_time\"]: ", current_wy_day["date"], " ", current_wy_day["wyday_final_work_time"])
                else:
                    # Even though existing list are added but the new 
                    # spreadsheet row data is not inside the existing list, 
                    # which means i will have to add the new dictionary object 
                    # in and use it to process the rest of the data values
                    current_wy_day = {"date": datetime.strptime(spreadsheetData[i][work_date_column_index], "%Y/%m/%d"), \
                                "wyday_final_work_time": datetime.strptime(spreadsheetData[i][work_efficiency_duration_column_index], "%H:%M:%S"), \
                                "wyday_total_work_time": datetime.strptime(spreadsheetData[i][work_duration_column_index], "%H:%M:%S"), \
                                "wyday_work_efficiency": float(str(spreadsheetData[i][work_efficiency_column_index]).replace("%", "")), \
                                "counter": 1, \
                                "average_calculated": False}
                    # Append current work day dirctionary object to the main data 
                    # structure "python_amchart_data_arr"
                    python_amchart_data_arr.append(current_wy_day)
                    python_amchart_data_arr_counter += 1 # Increment counter

    # Finally calculate the average work efficiency value using the data 
    # initialized inside each dictionary object inside the main data structure
    # "python_amchart_data_arr"
    for elem in python_amchart_data_arr:
        #print(elem)
        # If "average_calculated" is False then calculate the average work 
        # efficiency and set to True so it won't be calculated 
        if elem["average_calculated"] == False:
            elem["wyday_work_efficiency"] = elem["wyday_work_efficiency"] / elem["counter"] 
            elem["average_calculated"] = True

    # Print to final check
    #print("python_amchart_data_arr:", str(python_amchart_data_arr))

    # Save list to file with newly appeneded data, if the file existed before
    # then the new data will be appeneded to the existing data so the datas are 
    # merged into one
    save_list_to_file(python_amchart_data_arr_file_path, python_amchart_data_arr)

    # Return Python amChart data main data structure list
    return python_amchart_data_arr

#===============================================================================
#===============================================================================
#===============================================================================
# Retrieve time report data from Google Spreadsheet
# Process the data into amChart compatible data to create the aChart dashboard
#===============================================================================
#===============================================================================
#===============================================================================
def oauth_time_report_dashboard_generator(google_spreadsheet_url, scopes,
                                oauth_client_application_name, oauth_client_secret_json_file,
                                feed_name, feed_range, time_report_dashboard_html_file_path):
    '''
    ------------------------------------------------------------------------
    Title:
    ------------------------------------------------------------------------

    ------------------------------------------------------------------------
    Description:
    ------------------------------------------------------------------------
    This function is to generate the Python amChart data list data structure to 
    hold all the information retrieved from time report Google Spreadsheet to 
    organize the data in a trivial way.

    ------------------------------------------------------------------------
    Parameters:
    ------------------------------------------------------------------------
    :param spreadsheetData:
    :type spreadsheetData:

    IMPORTANT:
        This is the main algorithm where i calculate the time report data for 
        daily format, means that automatically sums up the values from 
        multiple rows of time reports in the Google Spreadsheet or even multiple 
        Google Spreadsheet time reports.

    ------------------------------------------------------------------------
    Algorithm:
    ------------------------------------------------------------------------
    1. Load byte code lists from file, if exists:
        - Process Google Spreadsheet data 
    2. Find the element in the existing list with key:
        - If found then add the data (work time, duration, efficiency) to the existing element 
        - If not found then add the new element to the existing list.
    3. If the byte code file does not exist then proceed to make one
        - Process Google Spreadsheet data 
        - Set list data contains the time report informations  (work time, duration, efficiency)
        - Append to empty list
    4. Save byte code lists to file
    5. Go back to step 1 for merging second spreadsheet data into one dashboard.

    ------------------------------------------------------------------------
    Return:
    ------------------------------------------------------------------------
    :return python_amchart_data_arr: Python amChart data main data structure list
    :rtype  python_amchart_data_arr: [{},{},{} ...]

    '''
    current_working_directory = os.getcwd()

    # Get Google spreadsheet data using sub function from script oauth_test_case_generator_get_spreadsheet_data.py
    spreadsheetData = oauth_time_report_dashboard_get_spreadsheet_data(google_spreadsheet_url, scopes,
                                oauth_client_application_name, oauth_client_secret_json_file,
                                feed_name, feed_range)
    
    final_time_report_dashboard_chart_html_file_path = ""
    final_time_report_dashboard_chart_html_code_str = ""
    #===========================================================================
    # Process spreadsheet data retrieved
    #===========================================================================
    if not spreadsheetData:
        print('No data found.')
    else:
        # Get rid of empty lists inside the spreadsheet data list
        spreadsheetData = [x for x in spreadsheetData if x != []]
        
        # Save list to file if file not exist
        # Append list to existing list in the file if file exist
        spreadsheet_data_file_path = time_report_dashboard_html_file_path.replace(".html", "") + "_spreadsheet_data_list.txt"
        spreadsheet_data_file_path = current_working_directory + spreadsheet_data_file_path
        save_list_to_file(spreadsheet_data_file_path, spreadsheetData)
        # Load back the list from file with appened data
        spreadsheetData = load_list_from_file(spreadsheet_data_file_path)
        #print("\n\n" + str(spreadsheetData))

        #=======================================================================
        # Using the data retrieved from Google spreadsheet to generate the 
        # time report dashboard chart data
        #=======================================================================
        # Generate time report dashboard amChart data in Python 
        python_amchart_data = process_google_spreadsheet_time_report_data_into_amchart_data(spreadsheetData, time_report_dashboard_html_file_path)

        # Generate time report dashboard amChart data generating Javascript 
        # code string using the amChart data generated in Python 
        javacscript_amchart_push_code_str = generate_time_report_dashboard_amchart_data_generate_str(python_amchart_data)

        # Generate time report dashboard final HTML page using the amChart data 
        # generating Javascript code string inserted inside the HTML page
        final_time_report_dashboard_html_str = generate_time_report_dashboard_html_file_str(javacscript_amchart_push_code_str)

        #=======================================================================
        # Export the OAuth time report dashboard as HTML file
        # using the file path passed in as command line arguments
        #=======================================================================
        final_time_report_dashboard_chart_html_file_path = current_working_directory + time_report_dashboard_html_file_path
        with safe_open_w(final_time_report_dashboard_chart_html_file_path) as text_file:
            text_file.write(final_time_report_dashboard_html_str)

    #===========================================================================
    # Returned final exported time report dashboard HTML file path
    #===========================================================================
    return final_time_report_dashboard_chart_html_file_path

   
