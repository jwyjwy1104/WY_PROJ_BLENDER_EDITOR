['Project name', 'WY_PROJ_BLENDER_EDITOR', '', '', '', '', '', '', '', 'Note']
['Created by', 'NICK JANG', '', '', '', '', '', '', '', 'Creator of this test case data']
['Reference documents', 'Google Drive', '', '', '', '', '', '', '', 'Reference links']
['Date of creation', '2018-01-22', '', '', '', '', '', '', '', 'Date of creation']
['Last update', '2018-01-22', '', '', '', '', '', '', '', 'Date of last update']
['Test case file name', '..\\..\\test\\WYModelManagerTestCases_export_wyarmature\\WYModelManagerTestCases_export_wyarmature.py', '', '', '', '', '', '', '', 'Unit test case file - Relative to OAuth test case generator to export with (Will be appended to test case generator working directory) - Exported in the main WYCoordsys class folder inside WYCoordsysTestCases folder']
['Test case data file name', '..\\..\\test\\WYModelManagerTestCases_export_wyarmature\\WYModelManagerTestCases_export_wyarmature.txt', '', '', '', '', '', '', '', 'Unit test case data file - Relative to OAuth test case generator to export with (Will be appended to test case generator working directory) - Exported in the main WYCoordsys class folder inside WYCoordsysTestCases folder']
['Testing class file name', '..\\..\\main\\WYModelManager\\WYModelManager.py', '', '', '', '', '', '', '', 'Testing file destination - Relative to OAuth test case generator to export with (Will be appended to test case generator working directory) - Use to precompile in the unit test case file header at the very top before class defintion']
['Testing class function name', 'export_wyarmature(wyarmature, wyarmature_file_path)', '', '', '', '', '', '', '', 'Main testing function definition name with parameter names']
['Unit test case class name', 'WYModelManagerTestCases_export_wyarmature', '', '', '', '', '', '', '', 'Main unit test case class name for class definition']
['Unit test case class description', 'Unit test case for class WYModelManager export_wyarmature() function', '', '', '', '', '', '', '', 'Main unit test case description to generate Pydoc under the class definition']
['Unit test case class header imports', '# Pre-condition: WYArmature is tested.', '', '', '', '', '', '', '', 'Main unit test case import code line - sys, os, math is imported by default and unittest will be imported in default since this is test case generator']
['Unit test case result file name', '..\\..\\test\\WYModelManagerTestCases_export_wyarmature\\WYModelManagerTestCaseResult_export_wyarmature.txt', '', '', '', '', '', '', '', 'Unit test case execution result output file - Relative to OAuth test case generator to export with (Will be appended to test case generator working directory) - Exported in the main WYCoordsys class folder inside WYCoordsysTestCases folder']
['', '', '', '', '', '', 'Param name', 'wyarmature', 'wyarmature_file_path']
['', '', '', '', '', '', 'Param type', 'WYArmature', 'string']
['', '', '', '', '', '', 'Param description', 'WYArmature object to export with.', 'String of the file path to export the WYArmature object onto']
['Note: Unique test case ID', 'Note: For Pydoc', 'Note: For Pydoc', 'Note: For code and Pydoc', 'Note: Without brackets', 'Note: For Pydoc', 'Note: Allocate class object variable name', 'Note: Parameter used for testing class object allocation to test the function in the class\n\nexport_wyarmature: classvar = Class(alloc_params) \r\n__str__: classvar = Class(alloc_params)\r\nother functions: classvar = Class(alloc_params)', '', 'Note: Testing funciton expected output - this will be writen to assertion code like this:\nexport_wyarmature: classvar = Class(alloc_params) \n              assertTrue(classvar.expected_result)\n__str__: classvar = Class(alloc_params)\n              assertTrue(str(classvar) == expected_result)\nother functions: classvar = Class(alloc_params)\n                          assertTrue(classvar.testfunc(func_params) == expected_result)', 'Head', 'Tail', '', '', '', '', '', '', 'Note: Lines of codes to be appended to current test case function body MUST add 8 space characters of each line  to match the indentation', 'Note: Lines of codes to be prepended to current test case function body MUST add 8 space characters of each line to match the indentation', 'Note: If the full testing function body code exists then all the values in other column cells will be the refrence to be written to the Pydoc, and the function body itself will be the code indicated in current column cell. So if this column value is empty then the testing code will be generated using the data from other cells, else other column cells will be the reference to generate the testing function pydoc data.']
['NC - Test Case ID', 'Test case title', 'Test case description', 'Testing class name', 'Testing function name', 'Testing function return type', 'Testing variable name', 'Func param 01', 'Func param 02', 'Expected result 01', 'Test case data lists note', 'Test case data lists note', 'Test case data lists note', 'Test case data lists note', 'Test case data lists note', 'Test case data lists note', 'Test case data lists note', 'Note', 'Code lines before testing body', 'Code lines after testing body', 'Test case funciton body full code']
['TC_NC_0001', 'WYModelManager export_wyarmature function testing normal case 0001', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0001" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0001', 'myArmature = bpy.data.armatures.new("TestArmature0001")\n        myObject = bpy.data.objects.new("TestArmatureObject0001", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0001")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0001', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0001', 'TestArmatureObject0001', 'TestArmatureBoneName0001', 'TestFile0001', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0001', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0001")\n        myObject = bpy.data.objects.new("TestArmatureObject0001", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0001")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0001 = WYModelManager()\n        wymodelmanager0001.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0001.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0001.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0001\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0002', 'WYModelManager export_wyarmature function testing normal case 0002', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0002" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0002', 'myArmature = bpy.data.armatures.new("TestArmature0002")\n        myObject = bpy.data.objects.new("TestArmatureObject0002", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0002")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0002', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0002', 'TestArmatureObject0002', 'TestArmatureBoneName0002', 'TestFile0002', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0002', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0002")\n        myObject = bpy.data.objects.new("TestArmatureObject0002", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0002")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0002 = WYModelManager()\n        wymodelmanager0002.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0002.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0002.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0002\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0003', 'WYModelManager export_wyarmature function testing normal case 0003', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0003" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0003', 'myArmature = bpy.data.armatures.new("TestArmature0003")\n        myObject = bpy.data.objects.new("TestArmatureObject0003", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0003")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0003', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0003', 'TestArmatureObject0003', 'TestArmatureBoneName0003', 'TestFile0003', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0003', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0003")\n        myObject = bpy.data.objects.new("TestArmatureObject0003", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0003")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0003 = WYModelManager()\n        wymodelmanager0003.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0003.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0003.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0003\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0004', 'WYModelManager export_wyarmature function testing normal case 0004', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0004" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0004', 'myArmature = bpy.data.armatures.new("TestArmature0004")\n        myObject = bpy.data.objects.new("TestArmatureObject0004", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0004")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0004', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0004', 'TestArmatureObject0004', 'TestArmatureBoneName0004', 'TestFile0004', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0004', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0004")\n        myObject = bpy.data.objects.new("TestArmatureObject0004", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0004")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0004 = WYModelManager()\n        wymodelmanager0004.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0004.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0004.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0004\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0005', 'WYModelManager export_wyarmature function testing normal case 0005', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0005" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0005', 'myArmature = bpy.data.armatures.new("TestArmature0005")\n        myObject = bpy.data.objects.new("TestArmatureObject0005", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0005")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0005', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0005', 'TestArmatureObject0005', 'TestArmatureBoneName0005', 'TestFile0005', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0005', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0005")\n        myObject = bpy.data.objects.new("TestArmatureObject0005", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0005")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0005 = WYModelManager()\n        wymodelmanager0005.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0005.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0005.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0005\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0006', 'WYModelManager export_wyarmature function testing normal case 0006', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0006" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0006', 'myArmature = bpy.data.armatures.new("TestArmature0006")\n        myObject = bpy.data.objects.new("TestArmatureObject0006", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0006")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0006', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0006', 'TestArmatureObject0006', 'TestArmatureBoneName0006', 'TestFile0006', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0006', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0006")\n        myObject = bpy.data.objects.new("TestArmatureObject0006", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0006")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0006 = WYModelManager()\n        wymodelmanager0006.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0006.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0006.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0006\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0007', 'WYModelManager export_wyarmature function testing normal case 0007', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0007" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0007', 'myArmature = bpy.data.armatures.new("TestArmature0007")\n        myObject = bpy.data.objects.new("TestArmatureObject0007", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0007")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0007', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0007', 'TestArmatureObject0007', 'TestArmatureBoneName0007', 'TestFile0007', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0007', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0007")\n        myObject = bpy.data.objects.new("TestArmatureObject0007", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0007")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0007 = WYModelManager()\n        wymodelmanager0007.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0007.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0007.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0007\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0008', 'WYModelManager export_wyarmature function testing normal case 0008', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0008" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0008', 'myArmature = bpy.data.armatures.new("TestArmature0008")\n        myObject = bpy.data.objects.new("TestArmatureObject0008", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0008")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0008', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0008', 'TestArmatureObject0008', 'TestArmatureBoneName0008', 'TestFile0008', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0008', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0008")\n        myObject = bpy.data.objects.new("TestArmatureObject0008", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0008")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0008 = WYModelManager()\n        wymodelmanager0008.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0008.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0008.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0008\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0009', 'WYModelManager export_wyarmature function testing normal case 0009', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0009" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0009', 'myArmature = bpy.data.armatures.new("TestArmature0009")\n        myObject = bpy.data.objects.new("TestArmatureObject0009", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0009")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0009', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0009', 'TestArmatureObject0009', 'TestArmatureBoneName0009', 'TestFile0009', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0009', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0009")\n        myObject = bpy.data.objects.new("TestArmatureObject0009", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0009")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0009 = WYModelManager()\n        wymodelmanager0009.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0009.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0009.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0009\'].select = True\n        bpy.ops.object.delete()']
['TC_NC_0010', 'WYModelManager export_wyarmature function testing normal case 0010', 'Testing if the WYArmature object initialized with default Blender armature object is exported onto the given path "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0010" through "export_wyarmature" function resulting the string read from the given file path is equal to the object toString value.', 'WYModelManager', 'export_wyarmature', 'void', 'wymodelmanager0010', 'myArmature = bpy.data.armatures.new("TestArmature0010")\n        myObject = bpy.data.objects.new("TestArmatureObject0010", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0010")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0010', 'content == str(wyarmature)', '[1,0,0]', '[0,0,0]', 'TestArmature0010', 'TestArmatureObject0010', 'TestArmatureBoneName0010', 'TestFile0010', '..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0010', '', '', '', '        myArmature = bpy.data.armatures.new("TestArmature0010")\n        myObject = bpy.data.objects.new("TestArmatureObject0010", myArmature)\n        bpy.context.scene.objects.link(myObject)\n        bpy.context.scene.objects.active = myObject\n        bpy.ops.object.mode_set(mode=\'EDIT\')  \n        myArmatureBone = myObject.data.edit_bones.new("TestArmatureBoneName0010")\n        myArmatureBone.head = [1, 0, 0]\n        myArmatureBone.tail = [0, 0, 0]\n        bpy.ops.object.mode_set(mode=\'OBJECT\')\n        wyarmature = WYArmature(myObject, None, None)\n        wyarmature.init_armature_data()\n        wymodelmanager0010 = WYModelManager()\n        wymodelmanager0010.export_wyarmature(wyarmature, "..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0010.wya")\n        with open(os.getcwd() + "\\\\" + \'..\\\\..\\\\test\\\\WYModelManagerTestCases_export_wyarmature\\\\TestFile0010.wya\', \'r\') as content_file:\n            content = content_file.read()    \n        print(content)   \n        self.assertTrue(content == str(wyarmature)) \n        bpy.ops.object.mode_set(mode=\'OBJECT\')  \n        bpy.data.objects[\'TestArmatureObject0010\'].select = True\n        bpy.ops.object.delete()']
